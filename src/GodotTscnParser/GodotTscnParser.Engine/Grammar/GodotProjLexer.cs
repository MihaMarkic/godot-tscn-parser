//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\GodotProj.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.GodotTscnParser.Engine.Grammar {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class GodotProjLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, KEY=12, NUMBER=13, COMMA=14, START_BRACKET=15, END_BRACKET=16, 
		STRING=17, COMMENT=18, EOL=19, WS=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "KEY", "NUMBER", "FLOAT", "INT", "COMMA", "START_BRACKET", 
		"END_BRACKET", "STRING", "COMMENT", "EOL", "WS"
	};


	public GodotProjLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GodotProjLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'config_version'", "'='", "'{'", "'}'", "':'", "'('", "')'", "'/'", 
		"'true'", "'false'", "'null'", null, null, "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"KEY", "NUMBER", "COMMA", "START_BRACKET", "END_BRACKET", "STRING", "COMMENT", 
		"EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GodotProj.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GodotProjLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
		1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,5,11,93,8,11,
		10,11,12,11,96,9,11,1,12,3,12,99,8,12,1,12,1,12,3,12,103,8,12,1,12,3,12,
		106,8,12,1,13,4,13,109,8,13,11,13,12,13,110,1,13,1,13,5,13,115,8,13,10,
		13,12,13,118,9,13,1,13,1,13,4,13,122,8,13,11,13,12,13,123,3,13,126,8,13,
		1,14,1,14,1,14,5,14,131,8,14,10,14,12,14,134,9,14,3,14,136,8,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,5,18,146,8,18,10,18,12,18,149,9,18,1,
		18,1,18,1,19,1,19,5,19,155,8,19,10,19,12,19,158,9,19,1,19,1,19,1,20,1,
		20,1,20,3,20,165,8,20,1,21,4,21,168,8,21,11,21,12,21,169,1,21,1,21,2,147,
		156,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,0,29,0,31,14,33,15,35,16,37,17,39,18,41,19,43,20,1,0,6,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,10,10,
		13,13,2,0,9,9,32,32,184,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,
		1,0,0,0,3,60,1,0,0,0,5,62,1,0,0,0,7,64,1,0,0,0,9,66,1,0,0,0,11,68,1,0,
		0,0,13,70,1,0,0,0,15,72,1,0,0,0,17,74,1,0,0,0,19,79,1,0,0,0,21,85,1,0,
		0,0,23,90,1,0,0,0,25,105,1,0,0,0,27,125,1,0,0,0,29,135,1,0,0,0,31,137,
		1,0,0,0,33,139,1,0,0,0,35,141,1,0,0,0,37,143,1,0,0,0,39,152,1,0,0,0,41,
		164,1,0,0,0,43,167,1,0,0,0,45,46,5,99,0,0,46,47,5,111,0,0,47,48,5,110,
		0,0,48,49,5,102,0,0,49,50,5,105,0,0,50,51,5,103,0,0,51,52,5,95,0,0,52,
		53,5,118,0,0,53,54,5,101,0,0,54,55,5,114,0,0,55,56,5,115,0,0,56,57,5,105,
		0,0,57,58,5,111,0,0,58,59,5,110,0,0,59,2,1,0,0,0,60,61,5,61,0,0,61,4,1,
		0,0,0,62,63,5,123,0,0,63,6,1,0,0,0,64,65,5,125,0,0,65,8,1,0,0,0,66,67,
		5,58,0,0,67,10,1,0,0,0,68,69,5,40,0,0,69,12,1,0,0,0,70,71,5,41,0,0,71,
		14,1,0,0,0,72,73,5,47,0,0,73,16,1,0,0,0,74,75,5,116,0,0,75,76,5,114,0,
		0,76,77,5,117,0,0,77,78,5,101,0,0,78,18,1,0,0,0,79,80,5,102,0,0,80,81,
		5,97,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,84,20,1,0,0,0,
		85,86,5,110,0,0,86,87,5,117,0,0,87,88,5,108,0,0,88,89,5,108,0,0,89,22,
		1,0,0,0,90,94,7,0,0,0,91,93,7,1,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,
		1,0,0,0,94,95,1,0,0,0,95,24,1,0,0,0,96,94,1,0,0,0,97,99,5,45,0,0,98,97,
		1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,106,3,29,14,0,101,103,5,45,0,
		0,102,101,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,106,3,27,13,0,105,
		98,1,0,0,0,105,102,1,0,0,0,106,26,1,0,0,0,107,109,3,29,14,0,108,107,1,
		0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,
		112,116,5,46,0,0,113,115,3,29,14,0,114,113,1,0,0,0,115,118,1,0,0,0,116,
		114,1,0,0,0,116,117,1,0,0,0,117,126,1,0,0,0,118,116,1,0,0,0,119,121,5,
		46,0,0,120,122,3,29,14,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,
		0,123,124,1,0,0,0,124,126,1,0,0,0,125,108,1,0,0,0,125,119,1,0,0,0,126,
		28,1,0,0,0,127,136,5,48,0,0,128,132,7,2,0,0,129,131,7,3,0,0,130,129,1,
		0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,136,1,0,0,0,
		134,132,1,0,0,0,135,127,1,0,0,0,135,128,1,0,0,0,136,30,1,0,0,0,137,138,
		5,44,0,0,138,32,1,0,0,0,139,140,5,91,0,0,140,34,1,0,0,0,141,142,5,93,0,
		0,142,36,1,0,0,0,143,147,5,34,0,0,144,146,9,0,0,0,145,144,1,0,0,0,146,
		149,1,0,0,0,147,148,1,0,0,0,147,145,1,0,0,0,148,150,1,0,0,0,149,147,1,
		0,0,0,150,151,5,34,0,0,151,38,1,0,0,0,152,156,5,59,0,0,153,155,9,0,0,0,
		154,153,1,0,0,0,155,158,1,0,0,0,156,157,1,0,0,0,156,154,1,0,0,0,157,159,
		1,0,0,0,158,156,1,0,0,0,159,160,3,41,20,0,160,40,1,0,0,0,161,162,5,13,
		0,0,162,165,5,10,0,0,163,165,7,4,0,0,164,161,1,0,0,0,164,163,1,0,0,0,165,
		42,1,0,0,0,166,168,7,5,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,
		0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,6,21,0,0,172,44,1,0,0,0,15,
		0,94,98,102,105,110,116,123,125,132,135,147,156,164,169,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.GodotTscnParser.Engine.Grammar
