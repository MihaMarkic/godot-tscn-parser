//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tscn.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.GodotTscnParser.Engine.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TscnParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, KEY=20, NUMBER=21, COMMA=22, START_BRACKET=23, END_BRACKET=24, 
		STRING=25, WS=26;
	public const int
		RULE_file = 0, RULE_fileDescriptor = 1, RULE_extResource = 2, RULE_subResource = 3, 
		RULE_node = 4, RULE_connection = 5, RULE_editable = 6, RULE_object = 7, 
		RULE_property = 8, RULE_propertyName = 9, RULE_extResourceRef = 10, RULE_subResourceRef = 11, 
		RULE_nodePath = 12, RULE_ref = 13, RULE_key = 14, RULE_resourceRef = 15, 
		RULE_complexValue = 16, RULE_emptyArray = 17, RULE_complexValueArray = 18, 
		RULE_pair = 19, RULE_pairName = 20, RULE_complexPairName = 21, RULE_complexPair = 22, 
		RULE_predicate = 23, RULE_value = 24, RULE_genericType = 25, RULE_number = 26;
	public static readonly string[] ruleNames = {
		"file", "fileDescriptor", "extResource", "subResource", "node", "connection", 
		"editable", "object", "property", "propertyName", "extResourceRef", "subResourceRef", 
		"nodePath", "ref", "key", "resourceRef", "complexValue", "emptyArray", 
		"complexValueArray", "pair", "pairName", "complexPairName", "complexPair", 
		"predicate", "value", "genericType", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gd_scene'", "'ext_resource'", "'sub_resource'", "'node'", "'connection'", 
		"'editable'", "'{'", "'}'", "':'", "'ExtResource'", "'('", "')'", "'SubResource'", 
		"'NodePath'", "'&'", "'='", "'true'", "'false'", "'null'", null, null, 
		"','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "KEY", "NUMBER", "COMMA", 
		"START_BRACKET", "END_BRACKET", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tscn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TscnParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TscnParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TscnParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileDescriptorContext fileDescriptor() {
			return GetRuleContext<FileDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceContext[] extResource() {
			return GetRuleContexts<ExtResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceContext extResource(int i) {
			return GetRuleContext<ExtResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceContext[] subResource() {
			return GetRuleContexts<SubResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceContext subResource(int i) {
			return GetRuleContext<SubResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext[] connection() {
			return GetRuleContexts<ConnectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext connection(int i) {
			return GetRuleContext<ConnectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EditableContext[] editable() {
			return GetRuleContexts<EditableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EditableContext editable(int i) {
			return GetRuleContext<EditableContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			fileDescriptor();
			State = 58;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 55;
					extResource();
					}
					} 
				}
				State = 60;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 61;
					subResource();
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 70;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 67;
					node();
					}
					} 
				}
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					connection();
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==START_BRACKET) {
				{
				{
				State = 79;
				editable();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public FileDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterFileDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitFileDescriptor(this);
		}
	}

	[RuleVersion(0)]
	public FileDescriptorContext fileDescriptor() {
		FileDescriptorContext _localctx = new FileDescriptorContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileDescriptor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(START_BRACKET);
			State = 86;
			Match(T__0);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 87;
				pair();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 92;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ExtResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extResource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterExtResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitExtResource(this);
		}
	}

	[RuleVersion(0)]
	public ExtResourceContext extResource() {
		ExtResourceContext _localctx = new ExtResourceContext(Context, State);
		EnterRule(_localctx, 4, RULE_extResource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(START_BRACKET);
			State = 95;
			Match(T__1);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 96;
				pair();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 101;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext[] complexPair() {
			return GetRuleContexts<ComplexPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair(int i) {
			return GetRuleContext<ComplexPairContext>(i);
		}
		public SubResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subResource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterSubResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitSubResource(this);
		}
	}

	[RuleVersion(0)]
	public SubResourceContext subResource() {
		SubResourceContext _localctx = new SubResourceContext(Context, State);
		EnterRule(_localctx, 6, RULE_subResource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(START_BRACKET);
			State = 104;
			Match(T__2);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 105;
				pair();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 110;
			Match(END_BRACKET);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 111;
				complexPair();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext[] complexPair() {
			return GetRuleContexts<ComplexPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair(int i) {
			return GetRuleContext<ComplexPairContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 8, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(START_BRACKET);
			State = 118;
			Match(T__3);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 119;
				complexPair();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 124;
			Match(END_BRACKET);
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 125;
				complexPair();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ConnectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitConnection(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionContext connection() {
		ConnectionContext _localctx = new ConnectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_connection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			Match(START_BRACKET);
			State = 132;
			Match(T__4);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 133;
				pair();
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 138;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EditableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public EditableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_editable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterEditable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitEditable(this);
		}
	}

	[RuleVersion(0)]
	public EditableContext editable() {
		EditableContext _localctx = new EditableContext(Context, State);
		EnterRule(_localctx, 12, RULE_editable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(START_BRACKET);
			State = 141;
			Match(T__5);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 142;
				pair();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 147;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 14, RULE_object);
		int _la;
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				Match(T__6);
				State = 150;
				property();
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 151;
					Match(COMMA);
					State = 152;
					property();
					}
					}
					State = 157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 158;
				Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				Match(T__6);
				State = 161;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 164;
				propertyName();
				}
				break;
			case T__14:
				{
				State = 165;
				@ref();
				}
				break;
			case NUMBER:
				{
				State = 166;
				key();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 169;
			Match(T__8);
			State = 170;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public ExtResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extResourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterExtResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitExtResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public ExtResourceRefContext extResourceRef() {
		ExtResourceRefContext _localctx = new ExtResourceRefContext(Context, State);
		EnterRule(_localctx, 20, RULE_extResourceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__9);
			State = 175;
			Match(T__10);
			State = 176;
			resourceRef();
			State = 177;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public SubResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subResourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterSubResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitSubResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public SubResourceRefContext subResourceRef() {
		SubResourceRefContext _localctx = new SubResourceRefContext(Context, State);
		EnterRule(_localctx, 22, RULE_subResourceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__12);
			State = 180;
			Match(T__10);
			State = 181;
			resourceRef();
			State = 182;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public NodePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNodePath(this);
		}
	}

	[RuleVersion(0)]
	public NodePathContext nodePath() {
		NodePathContext _localctx = new NodePathContext(Context, State);
		EnterRule(_localctx, 24, RULE_nodePath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(T__13);
			State = 185;
			Match(T__10);
			State = 186;
			resourceRef();
			State = 187;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(Context, State);
		EnterRule(_localctx, 26, RULE_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__14);
			State = 190;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 28, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public ResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public ResourceRefContext resourceRef() {
		ResourceRefContext _localctx = new ResourceRefContext(Context, State);
		EnterRule(_localctx, 30, RULE_resourceRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueArrayContext complexValueArray() {
			return GetRuleContext<ComplexValueArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceRefContext extResourceRef() {
			return GetRuleContext<ExtResourceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceRefContext subResourceRef() {
			return GetRuleContext<SubResourceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodePathContext nodePath() {
			return GetRuleContext<NodePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_complexValue);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				@object();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				complexValueArray();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				extResourceRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 199;
				subResourceRef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 200;
				nodePath();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 201;
				predicate();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 202;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		public EmptyArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterEmptyArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitEmptyArray(this);
		}
	}

	[RuleVersion(0)]
	public EmptyArrayContext emptyArray() {
		EmptyArrayContext _localctx = new EmptyArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_emptyArray);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(START_BRACKET);
			State = 206;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext[] complexValue() {
			return GetRuleContexts<ComplexValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue(int i) {
			return GetRuleContext<ComplexValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ComplexValueArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValueArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexValueArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexValueArray(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueArrayContext complexValueArray() {
		ComplexValueArrayContext _localctx = new ComplexValueArrayContext(Context, State);
		EnterRule(_localctx, 36, RULE_complexValueArray);
		int _la;
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				Match(START_BRACKET);
				State = 209;
				complexValue();
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 210;
					Match(COMMA);
					State = 211;
					complexValue();
					}
					}
					State = 216;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 217;
				Match(END_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				Match(START_BRACKET);
				State = 220;
				Match(END_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairNameContext pairName() {
			return GetRuleContext<PairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 38, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			pairName();
			State = 224;
			Match(T__15);
			State = 225;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		public PairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPairName(this);
		}
	}

	[RuleVersion(0)]
	public PairNameContext pairName() {
		PairNameContext _localctx = new PairNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_pairName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		public ComplexPairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexPairName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairNameContext complexPairName() {
		ComplexPairNameContext _localctx = new ComplexPairNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_complexPairName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairNameContext complexPairName() {
			return GetRuleContext<ComplexPairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public ComplexPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexPair(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairContext complexPair() {
		ComplexPairContext _localctx = new ComplexPairContext(Context, State);
		EnterRule(_localctx, 44, RULE_complexPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			complexPairName();
			State = 232;
			Match(T__15);
			State = 233;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext[] complexValue() {
			return GetRuleContexts<ComplexValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue(int i) {
			return GetRuleContext<ComplexValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType() {
			return GetRuleContext<GenericTypeContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 46, RULE_predicate);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				Match(KEY);
				State = 236;
				Match(T__10);
				State = 237;
				complexValue();
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 238;
					Match(COMMA);
					State = 239;
					complexValue();
					}
					}
					State = 244;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 245;
				Match(T__11);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				genericType();
				State = 248;
				Match(T__10);
				State = 249;
				complexValue();
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 250;
					Match(COMMA);
					State = 251;
					complexValue();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 257;
				Match(T__11);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259;
				Match(KEY);
				State = 260;
				Match(T__10);
				State = 261;
				Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_value);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265;
				Match(STRING);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266;
				@ref();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 4);
				{
				State = 267;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 5);
				{
				State = 268;
				Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 6);
				{
				State = 269;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext[] genericType() {
			return GetRuleContexts<GenericTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTypeContext genericType(int i) {
			return GetRuleContext<GenericTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceRefContext extResourceRef() {
			return GetRuleContext<ExtResourceRefContext>(0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterGenericType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitGenericType(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeContext genericType() {
		GenericTypeContext _localctx = new GenericTypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_genericType);
		int _la;
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				Match(KEY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				Match(KEY);
				State = 274;
				Match(START_BRACKET);
				State = 275;
				genericType();
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 276;
					Match(COMMA);
					State = 277;
					genericType();
					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 283;
				Match(END_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				extResourceRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 52, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,291,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,5,0,57,8,0,10,
		0,12,0,60,9,0,1,0,5,0,63,8,0,10,0,12,0,66,9,0,1,0,5,0,69,8,0,10,0,12,0,
		72,9,0,1,0,5,0,75,8,0,10,0,12,0,78,9,0,1,0,5,0,81,8,0,10,0,12,0,84,9,0,
		1,1,1,1,1,1,4,1,89,8,1,11,1,12,1,90,1,1,1,1,1,2,1,2,1,2,4,2,98,8,2,11,
		2,12,2,99,1,2,1,2,1,3,1,3,1,3,4,3,107,8,3,11,3,12,3,108,1,3,1,3,5,3,113,
		8,3,10,3,12,3,116,9,3,1,4,1,4,1,4,4,4,121,8,4,11,4,12,4,122,1,4,1,4,5,
		4,127,8,4,10,4,12,4,130,9,4,1,5,1,5,1,5,4,5,135,8,5,11,5,12,5,136,1,5,
		1,5,1,6,1,6,1,6,4,6,144,8,6,11,6,12,6,145,1,6,1,6,1,7,1,7,1,7,1,7,5,7,
		154,8,7,10,7,12,7,157,9,7,1,7,1,7,1,7,1,7,3,7,163,8,7,1,8,1,8,1,8,3,8,
		168,8,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,204,8,16,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,5,18,213,8,18,10,18,12,18,216,9,18,1,18,1,18,1,18,1,18,3,18,
		222,8,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,5,23,241,8,23,10,23,12,23,244,9,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,5,23,253,8,23,10,23,12,23,256,9,23,1,23,1,23,1,
		23,1,23,1,23,3,23,263,8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,271,8,24,
		1,25,1,25,1,25,1,25,1,25,1,25,5,25,279,8,25,10,25,12,25,282,9,25,1,25,
		1,25,1,25,3,25,287,8,25,1,26,1,26,1,26,0,0,27,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,0,1,2,0,21,21,25,25,
		300,0,54,1,0,0,0,2,85,1,0,0,0,4,94,1,0,0,0,6,103,1,0,0,0,8,117,1,0,0,0,
		10,131,1,0,0,0,12,140,1,0,0,0,14,162,1,0,0,0,16,167,1,0,0,0,18,172,1,0,
		0,0,20,174,1,0,0,0,22,179,1,0,0,0,24,184,1,0,0,0,26,189,1,0,0,0,28,192,
		1,0,0,0,30,194,1,0,0,0,32,203,1,0,0,0,34,205,1,0,0,0,36,221,1,0,0,0,38,
		223,1,0,0,0,40,227,1,0,0,0,42,229,1,0,0,0,44,231,1,0,0,0,46,262,1,0,0,
		0,48,270,1,0,0,0,50,286,1,0,0,0,52,288,1,0,0,0,54,58,3,2,1,0,55,57,3,4,
		2,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,64,1,0,
		0,0,60,58,1,0,0,0,61,63,3,6,3,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,
		0,0,64,65,1,0,0,0,65,70,1,0,0,0,66,64,1,0,0,0,67,69,3,8,4,0,68,67,1,0,
		0,0,69,72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,76,1,0,0,0,72,70,1,0,
		0,0,73,75,3,10,5,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,
		0,0,77,82,1,0,0,0,78,76,1,0,0,0,79,81,3,12,6,0,80,79,1,0,0,0,81,84,1,0,
		0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,1,1,0,0,0,84,82,1,0,0,0,85,86,5,23,
		0,0,86,88,5,1,0,0,87,89,3,38,19,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,
		0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,93,5,24,0,0,93,3,1,0,0,0,94,95,5,
		23,0,0,95,97,5,2,0,0,96,98,3,38,19,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,
		1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,5,24,0,0,102,5,1,0,0,0,
		103,104,5,23,0,0,104,106,5,3,0,0,105,107,3,38,19,0,106,105,1,0,0,0,107,
		108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,114,5,
		24,0,0,111,113,3,44,22,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,
		0,114,115,1,0,0,0,115,7,1,0,0,0,116,114,1,0,0,0,117,118,5,23,0,0,118,120,
		5,4,0,0,119,121,3,44,22,0,120,119,1,0,0,0,121,122,1,0,0,0,122,120,1,0,
		0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,128,5,24,0,0,125,127,3,44,22,0,
		126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,9,
		1,0,0,0,130,128,1,0,0,0,131,132,5,23,0,0,132,134,5,5,0,0,133,135,3,38,
		19,0,134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,
		138,1,0,0,0,138,139,5,24,0,0,139,11,1,0,0,0,140,141,5,23,0,0,141,143,5,
		6,0,0,142,144,3,38,19,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,
		0,145,146,1,0,0,0,146,147,1,0,0,0,147,148,5,24,0,0,148,13,1,0,0,0,149,
		150,5,7,0,0,150,155,3,16,8,0,151,152,5,22,0,0,152,154,3,16,8,0,153,151,
		1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,
		0,157,155,1,0,0,0,158,159,5,8,0,0,159,163,1,0,0,0,160,161,5,7,0,0,161,
		163,5,8,0,0,162,149,1,0,0,0,162,160,1,0,0,0,163,15,1,0,0,0,164,168,3,18,
		9,0,165,168,3,26,13,0,166,168,3,28,14,0,167,164,1,0,0,0,167,165,1,0,0,
		0,167,166,1,0,0,0,168,169,1,0,0,0,169,170,5,9,0,0,170,171,3,32,16,0,171,
		17,1,0,0,0,172,173,5,25,0,0,173,19,1,0,0,0,174,175,5,10,0,0,175,176,5,
		11,0,0,176,177,3,30,15,0,177,178,5,12,0,0,178,21,1,0,0,0,179,180,5,13,
		0,0,180,181,5,11,0,0,181,182,3,30,15,0,182,183,5,12,0,0,183,23,1,0,0,0,
		184,185,5,14,0,0,185,186,5,11,0,0,186,187,3,30,15,0,187,188,5,12,0,0,188,
		25,1,0,0,0,189,190,5,15,0,0,190,191,3,18,9,0,191,27,1,0,0,0,192,193,5,
		21,0,0,193,29,1,0,0,0,194,195,7,0,0,0,195,31,1,0,0,0,196,204,3,14,7,0,
		197,204,3,36,18,0,198,204,3,20,10,0,199,204,3,22,11,0,200,204,3,24,12,
		0,201,204,3,46,23,0,202,204,3,48,24,0,203,196,1,0,0,0,203,197,1,0,0,0,
		203,198,1,0,0,0,203,199,1,0,0,0,203,200,1,0,0,0,203,201,1,0,0,0,203,202,
		1,0,0,0,204,33,1,0,0,0,205,206,5,23,0,0,206,207,5,24,0,0,207,35,1,0,0,
		0,208,209,5,23,0,0,209,214,3,32,16,0,210,211,5,22,0,0,211,213,3,32,16,
		0,212,210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
		217,1,0,0,0,216,214,1,0,0,0,217,218,5,24,0,0,218,222,1,0,0,0,219,220,5,
		23,0,0,220,222,5,24,0,0,221,208,1,0,0,0,221,219,1,0,0,0,222,37,1,0,0,0,
		223,224,3,40,20,0,224,225,5,16,0,0,225,226,3,32,16,0,226,39,1,0,0,0,227,
		228,5,20,0,0,228,41,1,0,0,0,229,230,5,20,0,0,230,43,1,0,0,0,231,232,3,
		42,21,0,232,233,5,16,0,0,233,234,3,32,16,0,234,45,1,0,0,0,235,236,5,20,
		0,0,236,237,5,11,0,0,237,242,3,32,16,0,238,239,5,22,0,0,239,241,3,32,16,
		0,240,238,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,
		245,1,0,0,0,244,242,1,0,0,0,245,246,5,12,0,0,246,263,1,0,0,0,247,248,3,
		50,25,0,248,249,5,11,0,0,249,254,3,32,16,0,250,251,5,22,0,0,251,253,3,
		32,16,0,252,250,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,
		0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,12,0,0,258,263,1,0,0,0,259,
		260,5,20,0,0,260,261,5,11,0,0,261,263,5,12,0,0,262,235,1,0,0,0,262,247,
		1,0,0,0,262,259,1,0,0,0,263,47,1,0,0,0,264,271,5,21,0,0,265,271,5,25,0,
		0,266,271,3,26,13,0,267,271,5,17,0,0,268,271,5,18,0,0,269,271,5,19,0,0,
		270,264,1,0,0,0,270,265,1,0,0,0,270,266,1,0,0,0,270,267,1,0,0,0,270,268,
		1,0,0,0,270,269,1,0,0,0,271,49,1,0,0,0,272,287,5,20,0,0,273,274,5,20,0,
		0,274,275,5,23,0,0,275,280,3,50,25,0,276,277,5,22,0,0,277,279,3,50,25,
		0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,
		283,1,0,0,0,282,280,1,0,0,0,283,284,5,24,0,0,284,287,1,0,0,0,285,287,3,
		20,10,0,286,272,1,0,0,0,286,273,1,0,0,0,286,285,1,0,0,0,287,51,1,0,0,0,
		288,289,5,21,0,0,289,53,1,0,0,0,25,58,64,70,76,82,90,99,108,114,122,128,
		136,145,155,162,167,203,214,221,242,254,262,270,280,286
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.GodotTscnParser.Engine.Grammar
