//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tscn.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.GodotTscnParser.Engine.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TscnParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, KEY=20, NUMBER=21, COMMA=22, START_BRACKET=23, END_BRACKET=24, 
		STRING=25, WS=26;
	public const int
		RULE_file = 0, RULE_fileDescriptor = 1, RULE_extResource = 2, RULE_subResource = 3, 
		RULE_node = 4, RULE_connection = 5, RULE_editable = 6, RULE_object = 7, 
		RULE_property = 8, RULE_propertyName = 9, RULE_extResourceRef = 10, RULE_subResourceRef = 11, 
		RULE_nodePath = 12, RULE_ref = 13, RULE_resourceRef = 14, RULE_numericStructure = 15, 
		RULE_complexValue = 16, RULE_objectArray = 17, RULE_complexValueArray = 18, 
		RULE_pair = 19, RULE_pairName = 20, RULE_complexPairName = 21, RULE_complexPair = 22, 
		RULE_predicate = 23, RULE_value = 24, RULE_number = 25;
	public static readonly string[] ruleNames = {
		"file", "fileDescriptor", "extResource", "subResource", "node", "connection", 
		"editable", "object", "property", "propertyName", "extResourceRef", "subResourceRef", 
		"nodePath", "ref", "resourceRef", "numericStructure", "complexValue", 
		"objectArray", "complexValueArray", "pair", "pairName", "complexPairName", 
		"complexPair", "predicate", "value", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gd_scene'", "'ext_resource'", "'sub_resource'", "'node'", "'connection'", 
		"'editable'", "'{'", "'}'", "':'", "'ExtResource'", "'('", "')'", "'SubResource'", 
		"'NodePath'", "'&'", "'='", "'true'", "'false'", "'null'", null, null, 
		"','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "KEY", "NUMBER", "COMMA", 
		"START_BRACKET", "END_BRACKET", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tscn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TscnParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TscnParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TscnParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileDescriptorContext fileDescriptor() {
			return GetRuleContext<FileDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceContext[] extResource() {
			return GetRuleContexts<ExtResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceContext extResource(int i) {
			return GetRuleContext<ExtResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceContext[] subResource() {
			return GetRuleContexts<SubResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceContext subResource(int i) {
			return GetRuleContext<SubResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext[] connection() {
			return GetRuleContexts<ConnectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext connection(int i) {
			return GetRuleContext<ConnectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EditableContext[] editable() {
			return GetRuleContexts<EditableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EditableContext editable(int i) {
			return GetRuleContext<EditableContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			fileDescriptor();
			State = 56;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 53;
					extResource();
					}
					} 
				}
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 62;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 59;
					subResource();
					}
					} 
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 68;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 65;
					node();
					}
					} 
				}
				State = 70;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 71;
					connection();
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==START_BRACKET) {
				{
				{
				State = 77;
				editable();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public FileDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterFileDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitFileDescriptor(this);
		}
	}

	[RuleVersion(0)]
	public FileDescriptorContext fileDescriptor() {
		FileDescriptorContext _localctx = new FileDescriptorContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileDescriptor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(START_BRACKET);
			State = 84;
			Match(T__0);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 85;
				pair();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 90;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ExtResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extResource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterExtResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitExtResource(this);
		}
	}

	[RuleVersion(0)]
	public ExtResourceContext extResource() {
		ExtResourceContext _localctx = new ExtResourceContext(Context, State);
		EnterRule(_localctx, 4, RULE_extResource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(START_BRACKET);
			State = 93;
			Match(T__1);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 94;
				pair();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 99;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext[] complexPair() {
			return GetRuleContexts<ComplexPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair(int i) {
			return GetRuleContext<ComplexPairContext>(i);
		}
		public SubResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subResource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterSubResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitSubResource(this);
		}
	}

	[RuleVersion(0)]
	public SubResourceContext subResource() {
		SubResourceContext _localctx = new SubResourceContext(Context, State);
		EnterRule(_localctx, 6, RULE_subResource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(START_BRACKET);
			State = 102;
			Match(T__2);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103;
				pair();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 108;
			Match(END_BRACKET);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 109;
				complexPair();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext[] complexPair() {
			return GetRuleContexts<ComplexPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair(int i) {
			return GetRuleContext<ComplexPairContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 8, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(START_BRACKET);
			State = 116;
			Match(T__3);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 117;
				complexPair();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 122;
			Match(END_BRACKET);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 123;
				complexPair();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ConnectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitConnection(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionContext connection() {
		ConnectionContext _localctx = new ConnectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_connection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(START_BRACKET);
			State = 130;
			Match(T__4);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 131;
				pair();
				}
				}
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 136;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EditableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public EditableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_editable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterEditable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitEditable(this);
		}
	}

	[RuleVersion(0)]
	public EditableContext editable() {
		EditableContext _localctx = new EditableContext(Context, State);
		EnterRule(_localctx, 12, RULE_editable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(START_BRACKET);
			State = 139;
			Match(T__5);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 140;
				pair();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 145;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 14, RULE_object);
		int _la;
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				Match(T__6);
				State = 148;
				property();
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 149;
					Match(COMMA);
					State = 150;
					property();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 156;
				Match(T__7);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				Match(T__6);
				State = 159;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 162;
				propertyName();
				}
				break;
			case T__14:
				{
				State = 163;
				@ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 166;
			Match(T__8);
			State = 167;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public ExtResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extResourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterExtResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitExtResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public ExtResourceRefContext extResourceRef() {
		ExtResourceRefContext _localctx = new ExtResourceRefContext(Context, State);
		EnterRule(_localctx, 20, RULE_extResourceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(T__9);
			State = 172;
			Match(T__10);
			State = 173;
			resourceRef();
			State = 174;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public SubResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subResourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterSubResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitSubResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public SubResourceRefContext subResourceRef() {
		SubResourceRefContext _localctx = new SubResourceRefContext(Context, State);
		EnterRule(_localctx, 22, RULE_subResourceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(T__12);
			State = 177;
			Match(T__10);
			State = 178;
			resourceRef();
			State = 179;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public NodePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNodePath(this);
		}
	}

	[RuleVersion(0)]
	public NodePathContext nodePath() {
		NodePathContext _localctx = new NodePathContext(Context, State);
		EnterRule(_localctx, 24, RULE_nodePath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__13);
			State = 182;
			Match(T__10);
			State = 183;
			resourceRef();
			State = 184;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(Context, State);
		EnterRule(_localctx, 26, RULE_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(T__14);
			State = 187;
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public ResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public ResourceRefContext resourceRef() {
		ResourceRefContext _localctx = new ResourceRefContext(Context, State);
		EnterRule(_localctx, 28, RULE_resourceRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(TscnParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(TscnParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public NumericStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNumericStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNumericStructure(this);
		}
	}

	[RuleVersion(0)]
	public NumericStructureContext numericStructure() {
		NumericStructureContext _localctx = new NumericStructureContext(Context, State);
		EnterRule(_localctx, 30, RULE_numericStructure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(KEY);
			State = 192;
			Match(T__10);
			State = 193;
			Match(NUMBER);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 194;
				Match(COMMA);
				State = 195;
				Match(NUMBER);
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 200;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectArrayContext objectArray() {
			return GetRuleContext<ObjectArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceRefContext extResourceRef() {
			return GetRuleContext<ExtResourceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceRefContext subResourceRef() {
			return GetRuleContext<SubResourceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericStructureContext numericStructure() {
			return GetRuleContext<NumericStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodePathContext nodePath() {
			return GetRuleContext<NodePathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_complexValue);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				objectArray();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				@object();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				extResourceRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 205;
				subResourceRef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 206;
				numericStructure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 207;
				nodePath();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 208;
				predicate();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 209;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ObjectArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterObjectArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitObjectArray(this);
		}
	}

	[RuleVersion(0)]
	public ObjectArrayContext objectArray() {
		ObjectArrayContext _localctx = new ObjectArrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_objectArray);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				Match(START_BRACKET);
				State = 213;
				@object();
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 214;
					Match(COMMA);
					State = 215;
					@object();
					}
					}
					State = 220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 221;
				Match(END_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				Match(START_BRACKET);
				State = 224;
				Match(END_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext[] complexValue() {
			return GetRuleContexts<ComplexValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue(int i) {
			return GetRuleContext<ComplexValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ComplexValueArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValueArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexValueArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexValueArray(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueArrayContext complexValueArray() {
		ComplexValueArrayContext _localctx = new ComplexValueArrayContext(Context, State);
		EnterRule(_localctx, 36, RULE_complexValueArray);
		int _la;
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				Match(START_BRACKET);
				State = 228;
				complexValue();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 229;
					Match(COMMA);
					State = 230;
					complexValue();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(END_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				Match(START_BRACKET);
				State = 239;
				Match(END_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairNameContext pairName() {
			return GetRuleContext<PairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 38, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			pairName();
			State = 243;
			Match(T__15);
			State = 244;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		public PairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPairName(this);
		}
	}

	[RuleVersion(0)]
	public PairNameContext pairName() {
		PairNameContext _localctx = new PairNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_pairName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		public ComplexPairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexPairName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairNameContext complexPairName() {
		ComplexPairNameContext _localctx = new ComplexPairNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_complexPairName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairNameContext complexPairName() {
			return GetRuleContext<ComplexPairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public ComplexPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexPair(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairContext complexPair() {
		ComplexPairContext _localctx = new ComplexPairContext(Context, State);
		EnterRule(_localctx, 44, RULE_complexPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			complexPairName();
			State = 251;
			Match(T__15);
			State = 252;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext[] complexValue() {
			return GetRuleContexts<ComplexValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue(int i) {
			return GetRuleContext<ComplexValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 46, RULE_predicate);
		int _la;
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254;
				Match(KEY);
				State = 255;
				Match(T__10);
				State = 256;
				complexValue();
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 257;
					Match(COMMA);
					State = 258;
					complexValue();
					}
					}
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 264;
				Match(T__11);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266;
				Match(KEY);
				State = 267;
				Match(T__10);
				State = 268;
				Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueArrayContext complexValueArray() {
			return GetRuleContext<ComplexValueArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_value);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				Match(STRING);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 273;
				@ref();
				}
				break;
			case START_BRACKET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 274;
				complexValueArray();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 5);
				{
				State = 275;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 6);
				{
				State = 276;
				Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 7);
				{
				State = 277;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 50, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,283,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,5,0,55,8,0,10,0,12,0,58,
		9,0,1,0,5,0,61,8,0,10,0,12,0,64,9,0,1,0,5,0,67,8,0,10,0,12,0,70,9,0,1,
		0,5,0,73,8,0,10,0,12,0,76,9,0,1,0,5,0,79,8,0,10,0,12,0,82,9,0,1,1,1,1,
		1,1,4,1,87,8,1,11,1,12,1,88,1,1,1,1,1,2,1,2,1,2,4,2,96,8,2,11,2,12,2,97,
		1,2,1,2,1,3,1,3,1,3,4,3,105,8,3,11,3,12,3,106,1,3,1,3,5,3,111,8,3,10,3,
		12,3,114,9,3,1,4,1,4,1,4,4,4,119,8,4,11,4,12,4,120,1,4,1,4,5,4,125,8,4,
		10,4,12,4,128,9,4,1,5,1,5,1,5,4,5,133,8,5,11,5,12,5,134,1,5,1,5,1,6,1,
		6,1,6,4,6,142,8,6,11,6,12,6,143,1,6,1,6,1,7,1,7,1,7,1,7,5,7,152,8,7,10,
		7,12,7,155,9,7,1,7,1,7,1,7,1,7,3,7,161,8,7,1,8,1,8,3,8,165,8,8,1,8,1,8,
		1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,4,15,
		197,8,15,11,15,12,15,198,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,3,16,211,8,16,1,17,1,17,1,17,1,17,5,17,217,8,17,10,17,12,17,220,9,
		17,1,17,1,17,1,17,1,17,3,17,226,8,17,1,18,1,18,1,18,1,18,5,18,232,8,18,
		10,18,12,18,235,9,18,1,18,1,18,1,18,1,18,3,18,241,8,18,1,19,1,19,1,19,
		1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
		5,23,260,8,23,10,23,12,23,263,9,23,1,23,1,23,1,23,1,23,1,23,3,23,270,8,
		23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,279,8,24,1,25,1,25,1,25,0,0,
		26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,0,1,2,0,21,21,25,25,292,0,52,1,0,0,0,2,83,1,0,0,0,4,92,1,0,0,0,6,
		101,1,0,0,0,8,115,1,0,0,0,10,129,1,0,0,0,12,138,1,0,0,0,14,160,1,0,0,0,
		16,164,1,0,0,0,18,169,1,0,0,0,20,171,1,0,0,0,22,176,1,0,0,0,24,181,1,0,
		0,0,26,186,1,0,0,0,28,189,1,0,0,0,30,191,1,0,0,0,32,210,1,0,0,0,34,225,
		1,0,0,0,36,240,1,0,0,0,38,242,1,0,0,0,40,246,1,0,0,0,42,248,1,0,0,0,44,
		250,1,0,0,0,46,269,1,0,0,0,48,278,1,0,0,0,50,280,1,0,0,0,52,56,3,2,1,0,
		53,55,3,4,2,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,
		57,62,1,0,0,0,58,56,1,0,0,0,59,61,3,6,3,0,60,59,1,0,0,0,61,64,1,0,0,0,
		62,60,1,0,0,0,62,63,1,0,0,0,63,68,1,0,0,0,64,62,1,0,0,0,65,67,3,8,4,0,
		66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,74,1,0,0,0,
		70,68,1,0,0,0,71,73,3,10,5,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,
		74,75,1,0,0,0,75,80,1,0,0,0,76,74,1,0,0,0,77,79,3,12,6,0,78,77,1,0,0,0,
		79,82,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,1,1,0,0,0,82,80,1,0,0,0,83,
		84,5,23,0,0,84,86,5,1,0,0,85,87,3,38,19,0,86,85,1,0,0,0,87,88,1,0,0,0,
		88,86,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,91,5,24,0,0,91,3,1,0,0,0,
		92,93,5,23,0,0,93,95,5,2,0,0,94,96,3,38,19,0,95,94,1,0,0,0,96,97,1,0,0,
		0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,5,24,0,0,100,5,1,0,
		0,0,101,102,5,23,0,0,102,104,5,3,0,0,103,105,3,38,19,0,104,103,1,0,0,0,
		105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,112,
		5,24,0,0,109,111,3,44,22,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,
		0,0,112,113,1,0,0,0,113,7,1,0,0,0,114,112,1,0,0,0,115,116,5,23,0,0,116,
		118,5,4,0,0,117,119,3,44,22,0,118,117,1,0,0,0,119,120,1,0,0,0,120,118,
		1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,126,5,24,0,0,123,125,3,44,
		22,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,
		9,1,0,0,0,128,126,1,0,0,0,129,130,5,23,0,0,130,132,5,5,0,0,131,133,3,38,
		19,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,
		136,1,0,0,0,136,137,5,24,0,0,137,11,1,0,0,0,138,139,5,23,0,0,139,141,5,
		6,0,0,140,142,3,38,19,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,
		0,143,144,1,0,0,0,144,145,1,0,0,0,145,146,5,24,0,0,146,13,1,0,0,0,147,
		148,5,7,0,0,148,153,3,16,8,0,149,150,5,22,0,0,150,152,3,16,8,0,151,149,
		1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,
		0,155,153,1,0,0,0,156,157,5,8,0,0,157,161,1,0,0,0,158,159,5,7,0,0,159,
		161,5,8,0,0,160,147,1,0,0,0,160,158,1,0,0,0,161,15,1,0,0,0,162,165,3,18,
		9,0,163,165,3,26,13,0,164,162,1,0,0,0,164,163,1,0,0,0,165,166,1,0,0,0,
		166,167,5,9,0,0,167,168,3,32,16,0,168,17,1,0,0,0,169,170,5,25,0,0,170,
		19,1,0,0,0,171,172,5,10,0,0,172,173,5,11,0,0,173,174,3,28,14,0,174,175,
		5,12,0,0,175,21,1,0,0,0,176,177,5,13,0,0,177,178,5,11,0,0,178,179,3,28,
		14,0,179,180,5,12,0,0,180,23,1,0,0,0,181,182,5,14,0,0,182,183,5,11,0,0,
		183,184,3,28,14,0,184,185,5,12,0,0,185,25,1,0,0,0,186,187,5,15,0,0,187,
		188,3,18,9,0,188,27,1,0,0,0,189,190,7,0,0,0,190,29,1,0,0,0,191,192,5,20,
		0,0,192,193,5,11,0,0,193,196,5,21,0,0,194,195,5,22,0,0,195,197,5,21,0,
		0,196,194,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,
		200,1,0,0,0,200,201,5,12,0,0,201,31,1,0,0,0,202,211,3,34,17,0,203,211,
		3,14,7,0,204,211,3,20,10,0,205,211,3,22,11,0,206,211,3,30,15,0,207,211,
		3,24,12,0,208,211,3,46,23,0,209,211,3,48,24,0,210,202,1,0,0,0,210,203,
		1,0,0,0,210,204,1,0,0,0,210,205,1,0,0,0,210,206,1,0,0,0,210,207,1,0,0,
		0,210,208,1,0,0,0,210,209,1,0,0,0,211,33,1,0,0,0,212,213,5,23,0,0,213,
		218,3,14,7,0,214,215,5,22,0,0,215,217,3,14,7,0,216,214,1,0,0,0,217,220,
		1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,
		0,221,222,5,24,0,0,222,226,1,0,0,0,223,224,5,23,0,0,224,226,5,24,0,0,225,
		212,1,0,0,0,225,223,1,0,0,0,226,35,1,0,0,0,227,228,5,23,0,0,228,233,3,
		32,16,0,229,230,5,22,0,0,230,232,3,32,16,0,231,229,1,0,0,0,232,235,1,0,
		0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,
		237,5,24,0,0,237,241,1,0,0,0,238,239,5,23,0,0,239,241,5,24,0,0,240,227,
		1,0,0,0,240,238,1,0,0,0,241,37,1,0,0,0,242,243,3,40,20,0,243,244,5,16,
		0,0,244,245,3,48,24,0,245,39,1,0,0,0,246,247,5,20,0,0,247,41,1,0,0,0,248,
		249,5,20,0,0,249,43,1,0,0,0,250,251,3,42,21,0,251,252,5,16,0,0,252,253,
		3,32,16,0,253,45,1,0,0,0,254,255,5,20,0,0,255,256,5,11,0,0,256,261,3,32,
		16,0,257,258,5,22,0,0,258,260,3,32,16,0,259,257,1,0,0,0,260,263,1,0,0,
		0,261,259,1,0,0,0,261,262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,
		265,5,12,0,0,265,270,1,0,0,0,266,267,5,20,0,0,267,268,5,11,0,0,268,270,
		5,12,0,0,269,254,1,0,0,0,269,266,1,0,0,0,270,47,1,0,0,0,271,279,5,21,0,
		0,272,279,5,25,0,0,273,279,3,26,13,0,274,279,3,36,18,0,275,279,5,17,0,
		0,276,279,5,18,0,0,277,279,5,19,0,0,278,271,1,0,0,0,278,272,1,0,0,0,278,
		273,1,0,0,0,278,274,1,0,0,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,
		0,0,0,279,49,1,0,0,0,280,281,5,21,0,0,281,51,1,0,0,0,25,56,62,68,74,80,
		88,97,106,112,120,126,134,143,153,160,164,198,210,218,225,233,240,261,
		269,278
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.GodotTscnParser.Engine.Grammar
