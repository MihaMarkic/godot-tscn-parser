//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tscn.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.GodotTscnParser.Engine.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class TscnParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, KEY=20, NUMBER=21, COMMA=22, START_BRACKET=23, END_BRACKET=24, 
		STRING=25, WS=26;
	public const int
		RULE_file = 0, RULE_fileDescriptor = 1, RULE_extResource = 2, RULE_subResource = 3, 
		RULE_node = 4, RULE_connection = 5, RULE_object = 6, RULE_property = 7, 
		RULE_extResourceRef = 8, RULE_subResourceRef = 9, RULE_nodePath = 10, 
		RULE_ref = 11, RULE_resourceRef = 12, RULE_numericStructure = 13, RULE_complexValue = 14, 
		RULE_objectArray = 15, RULE_complexValueArray = 16, RULE_pair = 17, RULE_complexPairName = 18, 
		RULE_complexPair = 19, RULE_value = 20, RULE_number = 21;
	public static readonly string[] ruleNames = {
		"file", "fileDescriptor", "extResource", "subResource", "node", "connection", 
		"object", "property", "extResourceRef", "subResourceRef", "nodePath", 
		"ref", "resourceRef", "numericStructure", "complexValue", "objectArray", 
		"complexValueArray", "pair", "complexPairName", "complexPair", "value", 
		"number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'gd_scene'", "'ext_resource'", "'sub_resource'", "'node'", "'connection'", 
		"'{'", "'}'", "':'", "'ExtResource'", "'('", "')'", "'SubResource'", "'NodePath'", 
		"'&'", "'='", "'/'", "'true'", "'false'", "'null'", null, null, "','", 
		"'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "KEY", "NUMBER", "COMMA", 
		"START_BRACKET", "END_BRACKET", "STRING", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tscn.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TscnParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TscnParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TscnParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FileDescriptorContext fileDescriptor() {
			return GetRuleContext<FileDescriptorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceContext[] extResource() {
			return GetRuleContexts<ExtResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceContext extResource(int i) {
			return GetRuleContext<ExtResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceContext[] subResource() {
			return GetRuleContexts<SubResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceContext subResource(int i) {
			return GetRuleContext<SubResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext[] connection() {
			return GetRuleContexts<ConnectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext connection(int i) {
			return GetRuleContext<ConnectionContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			fileDescriptor();
			State = 48;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 45;
					extResource();
					}
					} 
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 54;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 51;
					subResource();
					}
					} 
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 60;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 57;
					node();
					}
					} 
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==START_BRACKET) {
				{
				{
				State = 63;
				connection();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileDescriptorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public FileDescriptorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileDescriptor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterFileDescriptor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitFileDescriptor(this);
		}
	}

	[RuleVersion(0)]
	public FileDescriptorContext fileDescriptor() {
		FileDescriptorContext _localctx = new FileDescriptorContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileDescriptor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(START_BRACKET);
			State = 70;
			Match(T__0);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 71;
				pair();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 76;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ExtResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extResource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterExtResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitExtResource(this);
		}
	}

	[RuleVersion(0)]
	public ExtResourceContext extResource() {
		ExtResourceContext _localctx = new ExtResourceContext(Context, State);
		EnterRule(_localctx, 4, RULE_extResource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(START_BRACKET);
			State = 79;
			Match(T__1);
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 80;
				pair();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 85;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext[] complexPair() {
			return GetRuleContexts<ComplexPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair(int i) {
			return GetRuleContext<ComplexPairContext>(i);
		}
		public SubResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subResource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterSubResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitSubResource(this);
		}
	}

	[RuleVersion(0)]
	public SubResourceContext subResource() {
		SubResourceContext _localctx = new SubResourceContext(Context, State);
		EnterRule(_localctx, 6, RULE_subResource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(START_BRACKET);
			State = 88;
			Match(T__2);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 89;
				pair();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 94;
			Match(END_BRACKET);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 95;
				complexPair();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext[] complexPair() {
			return GetRuleContexts<ComplexPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair(int i) {
			return GetRuleContext<ComplexPairContext>(i);
		}
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNode(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 8, RULE_node);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(START_BRACKET);
			State = 102;
			Match(T__3);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103;
				pair();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 108;
			Match(END_BRACKET);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KEY) {
				{
				{
				State = 109;
				complexPair();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ConnectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitConnection(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionContext connection() {
		ConnectionContext _localctx = new ConnectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_connection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(START_BRACKET);
			State = 116;
			Match(T__4);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 117;
				pair();
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KEY );
			State = 122;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 12, RULE_object);
		int _la;
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(T__5);
				State = 125;
				property();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 126;
					Match(COMMA);
					State = 127;
					property();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				Match(T__6);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(T__5);
				State = 136;
				Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 14, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(STRING);
			State = 140;
			Match(T__7);
			State = 141;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public ExtResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extResourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterExtResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitExtResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public ExtResourceRefContext extResourceRef() {
		ExtResourceRefContext _localctx = new ExtResourceRefContext(Context, State);
		EnterRule(_localctx, 16, RULE_extResourceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(T__8);
			State = 144;
			Match(T__9);
			State = 145;
			resourceRef();
			State = 146;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public SubResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subResourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterSubResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitSubResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public SubResourceRefContext subResourceRef() {
		SubResourceRefContext _localctx = new SubResourceRefContext(Context, State);
		EnterRule(_localctx, 18, RULE_subResourceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(T__11);
			State = 149;
			Match(T__9);
			State = 150;
			resourceRef();
			State = 151;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodePathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceRefContext resourceRef() {
			return GetRuleContext<ResourceRefContext>(0);
		}
		public NodePathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodePath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNodePath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNodePath(this);
		}
	}

	[RuleVersion(0)]
	public NodePathContext nodePath() {
		NodePathContext _localctx = new NodePathContext(Context, State);
		EnterRule(_localctx, 20, RULE_nodePath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			Match(T__12);
			State = 154;
			Match(T__9);
			State = 155;
			resourceRef();
			State = 156;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		public RefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitRef(this);
		}
	}

	[RuleVersion(0)]
	public RefContext @ref() {
		RefContext _localctx = new RefContext(Context, State);
		EnterRule(_localctx, 22, RULE_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(T__13);
			State = 159;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public ResourceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterResourceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitResourceRef(this);
		}
	}

	[RuleVersion(0)]
	public ResourceRefContext resourceRef() {
		ResourceRefContext _localctx = new ResourceRefContext(Context, State);
		EnterRule(_localctx, 24, RULE_resourceRef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(TscnParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(TscnParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public NumericStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNumericStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNumericStructure(this);
		}
	}

	[RuleVersion(0)]
	public NumericStructureContext numericStructure() {
		NumericStructureContext _localctx = new NumericStructureContext(Context, State);
		EnterRule(_localctx, 26, RULE_numericStructure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(KEY);
			State = 164;
			Match(T__9);
			State = 165;
			Match(NUMBER);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 166;
				Match(COMMA);
				State = 167;
				Match(NUMBER);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 172;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectArrayContext objectArray() {
			return GetRuleContext<ObjectArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueArrayContext complexValueArray() {
			return GetRuleContext<ComplexValueArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtResourceRefContext extResourceRef() {
			return GetRuleContext<ExtResourceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubResourceRefContext subResourceRef() {
			return GetRuleContext<SubResourceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericStructureContext numericStructure() {
			return GetRuleContext<NumericStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_complexValue);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				objectArray();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				@object();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176;
				complexValueArray();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				extResourceRef();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				subResourceRef();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 179;
				numericStructure();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 180;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext[] @object() {
			return GetRuleContexts<ObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object(int i) {
			return GetRuleContext<ObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ObjectArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterObjectArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitObjectArray(this);
		}
	}

	[RuleVersion(0)]
	public ObjectArrayContext objectArray() {
		ObjectArrayContext _localctx = new ObjectArrayContext(Context, State);
		EnterRule(_localctx, 30, RULE_objectArray);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				Match(START_BRACKET);
				State = 184;
				@object();
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 185;
					Match(COMMA);
					State = 186;
					@object();
					}
					}
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 192;
				Match(END_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(START_BRACKET);
				State = 195;
				Match(END_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(TscnParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext[] complexValue() {
			return GetRuleContexts<ComplexValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue(int i) {
			return GetRuleContext<ComplexValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(TscnParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(TscnParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(TscnParser.COMMA, i);
		}
		public ComplexValueArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValueArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexValueArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexValueArray(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueArrayContext complexValueArray() {
		ComplexValueArrayContext _localctx = new ComplexValueArrayContext(Context, State);
		EnterRule(_localctx, 32, RULE_complexValueArray);
		int _la;
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				Match(START_BRACKET);
				State = 199;
				complexValue();
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 200;
					Match(COMMA);
					State = 201;
					complexValue();
					}
					}
					State = 206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 207;
				Match(END_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209;
				Match(START_BRACKET);
				State = 210;
				Match(END_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(TscnParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 34, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(KEY);
			State = 214;
			Match(T__14);
			State = 215;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(TscnParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(TscnParser.KEY, i);
		}
		public ComplexPairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexPairName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairNameContext complexPairName() {
		ComplexPairNameContext _localctx = new ComplexPairNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_complexPairName);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				Match(KEY);
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 218;
					Match(T__15);
					State = 219;
					Match(KEY);
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__15 );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairNameContext complexPairName() {
			return GetRuleContext<ComplexPairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public ComplexPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterComplexPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitComplexPair(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairContext complexPair() {
		ComplexPairContext _localctx = new ComplexPairContext(Context, State);
		EnterRule(_localctx, 38, RULE_complexPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			complexPairName();
			State = 228;
			Match(T__14);
			State = 229;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(TscnParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefContext @ref() {
			return GetRuleContext<RefContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_value);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(STRING);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				@ref();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234;
				Match(T__16);
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 5);
				{
				State = 235;
				Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 6);
				{
				State = 236;
				Match(T__18);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TscnParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITscnListener typedListener = listener as ITscnListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,26,242,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,5,0,47,8,0,10,0,12,0,50,9,0,1,0,5,0,53,8,0,10,0,12,0,56,9,0,1,
		0,5,0,59,8,0,10,0,12,0,62,9,0,1,0,5,0,65,8,0,10,0,12,0,68,9,0,1,1,1,1,
		1,1,4,1,73,8,1,11,1,12,1,74,1,1,1,1,1,2,1,2,1,2,4,2,82,8,2,11,2,12,2,83,
		1,2,1,2,1,3,1,3,1,3,4,3,91,8,3,11,3,12,3,92,1,3,1,3,5,3,97,8,3,10,3,12,
		3,100,9,3,1,4,1,4,1,4,4,4,105,8,4,11,4,12,4,106,1,4,1,4,5,4,111,8,4,10,
		4,12,4,114,9,4,1,5,1,5,1,5,4,5,119,8,5,11,5,12,5,120,1,5,1,5,1,6,1,6,1,
		6,1,6,5,6,129,8,6,10,6,12,6,132,9,6,1,6,1,6,1,6,1,6,3,6,138,8,6,1,7,1,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,4,13,169,8,13,11,
		13,12,13,170,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,182,8,14,
		1,15,1,15,1,15,1,15,5,15,188,8,15,10,15,12,15,191,9,15,1,15,1,15,1,15,
		1,15,3,15,197,8,15,1,16,1,16,1,16,1,16,5,16,203,8,16,10,16,12,16,206,9,
		16,1,16,1,16,1,16,1,16,3,16,212,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
		4,18,221,8,18,11,18,12,18,222,1,18,3,18,226,8,18,1,19,1,19,1,19,1,19,1,
		20,1,20,1,20,1,20,1,20,1,20,3,20,238,8,20,1,21,1,21,1,21,0,0,22,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,1,2,0,21,21,25,
		25,250,0,44,1,0,0,0,2,69,1,0,0,0,4,78,1,0,0,0,6,87,1,0,0,0,8,101,1,0,0,
		0,10,115,1,0,0,0,12,137,1,0,0,0,14,139,1,0,0,0,16,143,1,0,0,0,18,148,1,
		0,0,0,20,153,1,0,0,0,22,158,1,0,0,0,24,161,1,0,0,0,26,163,1,0,0,0,28,181,
		1,0,0,0,30,196,1,0,0,0,32,211,1,0,0,0,34,213,1,0,0,0,36,225,1,0,0,0,38,
		227,1,0,0,0,40,237,1,0,0,0,42,239,1,0,0,0,44,48,3,2,1,0,45,47,3,4,2,0,
		46,45,1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,54,1,0,0,0,
		50,48,1,0,0,0,51,53,3,6,3,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,
		54,55,1,0,0,0,55,60,1,0,0,0,56,54,1,0,0,0,57,59,3,8,4,0,58,57,1,0,0,0,
		59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,66,1,0,0,0,62,60,1,0,0,0,
		63,65,3,10,5,0,64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,
		67,1,1,0,0,0,68,66,1,0,0,0,69,70,5,23,0,0,70,72,5,1,0,0,71,73,3,34,17,
		0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,
		0,76,77,5,24,0,0,77,3,1,0,0,0,78,79,5,23,0,0,79,81,5,2,0,0,80,82,3,34,
		17,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,85,1,0,
		0,0,85,86,5,24,0,0,86,5,1,0,0,0,87,88,5,23,0,0,88,90,5,3,0,0,89,91,3,34,
		17,0,90,89,1,0,0,0,91,92,1,0,0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,94,1,0,
		0,0,94,98,5,24,0,0,95,97,3,38,19,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,
		1,0,0,0,98,99,1,0,0,0,99,7,1,0,0,0,100,98,1,0,0,0,101,102,5,23,0,0,102,
		104,5,4,0,0,103,105,3,34,17,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,
		1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,112,5,24,0,0,109,111,3,38,
		19,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,
		9,1,0,0,0,114,112,1,0,0,0,115,116,5,23,0,0,116,118,5,5,0,0,117,119,3,34,
		17,0,118,117,1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
		122,1,0,0,0,122,123,5,24,0,0,123,11,1,0,0,0,124,125,5,6,0,0,125,130,3,
		14,7,0,126,127,5,22,0,0,127,129,3,14,7,0,128,126,1,0,0,0,129,132,1,0,0,
		0,130,128,1,0,0,0,130,131,1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,
		134,5,7,0,0,134,138,1,0,0,0,135,136,5,6,0,0,136,138,5,7,0,0,137,124,1,
		0,0,0,137,135,1,0,0,0,138,13,1,0,0,0,139,140,5,25,0,0,140,141,5,8,0,0,
		141,142,3,28,14,0,142,15,1,0,0,0,143,144,5,9,0,0,144,145,5,10,0,0,145,
		146,3,24,12,0,146,147,5,11,0,0,147,17,1,0,0,0,148,149,5,12,0,0,149,150,
		5,10,0,0,150,151,3,24,12,0,151,152,5,11,0,0,152,19,1,0,0,0,153,154,5,13,
		0,0,154,155,5,10,0,0,155,156,3,24,12,0,156,157,5,11,0,0,157,21,1,0,0,0,
		158,159,5,14,0,0,159,160,5,25,0,0,160,23,1,0,0,0,161,162,7,0,0,0,162,25,
		1,0,0,0,163,164,5,20,0,0,164,165,5,10,0,0,165,168,5,21,0,0,166,167,5,22,
		0,0,167,169,5,21,0,0,168,166,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,
		171,1,0,0,0,171,172,1,0,0,0,172,173,5,11,0,0,173,27,1,0,0,0,174,182,3,
		30,15,0,175,182,3,12,6,0,176,182,3,32,16,0,177,182,3,16,8,0,178,182,3,
		18,9,0,179,182,3,26,13,0,180,182,3,40,20,0,181,174,1,0,0,0,181,175,1,0,
		0,0,181,176,1,0,0,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,
		180,1,0,0,0,182,29,1,0,0,0,183,184,5,23,0,0,184,189,3,12,6,0,185,186,5,
		22,0,0,186,188,3,12,6,0,187,185,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,
		0,189,190,1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,24,0,0,193,
		197,1,0,0,0,194,195,5,23,0,0,195,197,5,24,0,0,196,183,1,0,0,0,196,194,
		1,0,0,0,197,31,1,0,0,0,198,199,5,23,0,0,199,204,3,28,14,0,200,201,5,22,
		0,0,201,203,3,28,14,0,202,200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,
		204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,24,0,0,208,212,
		1,0,0,0,209,210,5,23,0,0,210,212,5,24,0,0,211,198,1,0,0,0,211,209,1,0,
		0,0,212,33,1,0,0,0,213,214,5,20,0,0,214,215,5,15,0,0,215,216,3,40,20,0,
		216,35,1,0,0,0,217,220,5,20,0,0,218,219,5,16,0,0,219,221,5,20,0,0,220,
		218,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,226,1,
		0,0,0,224,226,5,20,0,0,225,217,1,0,0,0,225,224,1,0,0,0,226,37,1,0,0,0,
		227,228,3,36,18,0,228,229,5,15,0,0,229,230,3,28,14,0,230,39,1,0,0,0,231,
		238,5,21,0,0,232,238,5,25,0,0,233,238,3,22,11,0,234,238,5,17,0,0,235,238,
		5,18,0,0,236,238,5,19,0,0,237,231,1,0,0,0,237,232,1,0,0,0,237,233,1,0,
		0,0,237,234,1,0,0,0,237,235,1,0,0,0,237,236,1,0,0,0,238,41,1,0,0,0,239,
		240,5,21,0,0,240,43,1,0,0,0,22,48,54,60,66,74,83,92,98,106,112,120,130,
		137,170,181,189,196,204,211,222,225,237
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.GodotTscnParser.Engine.Grammar
