//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GodotProj.t4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Righthand.GodotTscnParser.Engine.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class GodotProjParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, KEY=12, NUMBER=13, COMMA=14, START_BRACKET=15, END_BRACKET=16, 
		STRING=17, COMMENT=18, EOL=19, WS=20;
	public const int
		RULE_file = 0, RULE_section = 1, RULE_sectionName = 2, RULE_sectionLine = 3, 
		RULE_object = 4, RULE_objectProperty = 5, RULE_property = 6, RULE_propertyValue = 7, 
		RULE_propertyValueArray = 8, RULE_propertyObjectArray = 9, RULE_propertyObject = 10, 
		RULE_propertyObjectName = 11, RULE_propertyObjectTypeName = 12, RULE_propertyName = 13, 
		RULE_numericStructure = 14, RULE_complexValue = 15, RULE_pair = 16, RULE_pairName = 17, 
		RULE_complexPairName = 18, RULE_complexPair = 19, RULE_value = 20, RULE_number = 21;
	public static readonly string[] ruleNames = {
		"file", "section", "sectionName", "sectionLine", "object", "objectProperty", 
		"property", "propertyValue", "propertyValueArray", "propertyObjectArray", 
		"propertyObject", "propertyObjectName", "propertyObjectTypeName", "propertyName", 
		"numericStructure", "complexValue", "pair", "pairName", "complexPairName", 
		"complexPair", "value", "number"
	};

	private static readonly string[] _LiteralNames = {
		null, "'config_version'", "'='", "'{'", "'}'", "':'", "'('", "')'", "'/'", 
		"'true'", "'false'", "'null'", null, null, "','", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"KEY", "NUMBER", "COMMA", "START_BRACKET", "END_BRACKET", "STRING", "COMMENT", 
		"EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GodotProj.t4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GodotProjParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GodotProjParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GodotProjParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GodotProjParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext[] section() {
			return GetRuleContexts<SectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionContext section(int i) {
			return GetRuleContext<SectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(GodotProjParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(GodotProjParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(GodotProjParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(GodotProjParser.EOL, i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT || _la==EOL) {
				{
				{
				State = 44;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMENT || _la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 50;
			Match(T__0);
			State = 51;
			Match(T__1);
			State = 52;
			Match(NUMBER);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT || _la==EOL) {
				{
				{
				State = 53;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMENT || _la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==START_BRACKET) {
				{
				{
				State = 59;
				section();
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(GodotProjParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SectionNameContext sectionName() {
			return GetRuleContext<SectionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(GodotProjParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(GodotProjParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(GodotProjParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionLineContext[] sectionLine() {
			return GetRuleContexts<SectionLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SectionLineContext sectionLine(int i) {
			return GetRuleContext<SectionLineContext>(i);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(START_BRACKET);
			State = 66;
			sectionName();
			State = 67;
			Match(END_BRACKET);
			State = 69;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 68;
					Match(EOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 790528L) != 0)) {
				{
				{
				State = 73;
				sectionLine();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(GodotProjParser.KEY, 0); }
		public SectionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterSectionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitSectionName(this);
		}
	}

	[RuleVersion(0)]
	public SectionNameContext sectionName() {
		SectionNameContext _localctx = new SectionNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_sectionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL() { return GetToken(GodotProjParser.EOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(GodotProjParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairContext complexPair() {
			return GetRuleContext<ComplexPairContext>(0);
		}
		public SectionLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sectionLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterSectionLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitSectionLine(this);
		}
	}

	[RuleVersion(0)]
	public SectionLineContext sectionLine() {
		SectionLineContext _localctx = new SectionLineContext(Context, State);
		EnterRule(_localctx, 6, RULE_sectionLine);
		int _la;
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81;
				Match(EOL);
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82;
				Match(COMMENT);
				}
				break;
			case KEY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				complexPair();
				State = 84;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMENT || _la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectPropertyContext[] objectProperty() {
			return GetRuleContexts<ObjectPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectPropertyContext objectProperty(int i) {
			return GetRuleContext<ObjectPropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GodotProjParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GodotProjParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(GodotProjParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(GodotProjParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(GodotProjParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(GodotProjParser.EOL, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitObject(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 8, RULE_object);
		int _la;
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				Match(T__2);
				State = 89;
				objectProperty();
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 90;
					Match(COMMA);
					State = 91;
					objectProperty();
					}
					}
					State = 96;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 97;
				Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				Match(T__2);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMENT || _la==EOL) {
					{
					{
					State = 100;
					_la = TokenStream.LA(1);
					if ( !(_la==COMMENT || _la==EOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 105;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 106;
				Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT() { return GetTokens(GodotProjParser.COMMENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT(int i) {
			return GetToken(GodotProjParser.COMMENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(GodotProjParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(GodotProjParser.EOL, i);
		}
		public ObjectPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterObjectProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitObjectProperty(this);
		}
	}

	[RuleVersion(0)]
	public ObjectPropertyContext objectProperty() {
		ObjectPropertyContext _localctx = new ObjectPropertyContext(Context, State);
		EnterRule(_localctx, 10, RULE_objectProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT || _la==EOL) {
				{
				{
				State = 109;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMENT || _la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115;
			property();
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT || _la==EOL) {
				{
				{
				State = 116;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMENT || _la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyValueContext propertyValue() {
			return GetRuleContext<PropertyValueContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			propertyName();
			State = 123;
			Match(T__4);
			State = 124;
			propertyValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyValueArrayContext propertyValueArray() {
			return GetRuleContext<PropertyValueArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyObjectArrayContext propertyObjectArray() {
			return GetRuleContext<PropertyObjectArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericStructureContext numericStructure() {
			return GetRuleContext<NumericStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropertyValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyValue(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueContext propertyValue() {
		PropertyValueContext _localctx = new PropertyValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_propertyValue);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 126;
				@object();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 127;
				propertyValueArray();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				propertyObjectArray();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129;
				numericStructure();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 130;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyValueArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(GodotProjParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyValueContext[] propertyValue() {
			return GetRuleContexts<PropertyValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyValueContext propertyValue(int i) {
			return GetRuleContext<PropertyValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(GodotProjParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GodotProjParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GodotProjParser.COMMA, i);
		}
		public PropertyValueArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyValueArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyValueArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyValueArray(this);
		}
	}

	[RuleVersion(0)]
	public PropertyValueArrayContext propertyValueArray() {
		PropertyValueArrayContext _localctx = new PropertyValueArrayContext(Context, State);
		EnterRule(_localctx, 16, RULE_propertyValueArray);
		int _la;
		try {
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				Match(START_BRACKET);
				State = 134;
				propertyValue();
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 135;
					Match(COMMA);
					State = 136;
					propertyValue();
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 142;
				Match(END_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				Match(START_BRACKET);
				State = 145;
				Match(END_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyObjectArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_BRACKET() { return GetToken(GodotProjParser.START_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PropertyObjectContext[] propertyObject() {
			return GetRuleContexts<PropertyObjectContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyObjectContext propertyObject(int i) {
			return GetRuleContext<PropertyObjectContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_BRACKET() { return GetToken(GodotProjParser.END_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOL() { return GetTokens(GodotProjParser.EOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOL(int i) {
			return GetToken(GodotProjParser.EOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GodotProjParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GodotProjParser.COMMA, i);
		}
		public PropertyObjectArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyObjectArray; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyObjectArray(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyObjectArray(this);
		}
	}

	[RuleVersion(0)]
	public PropertyObjectArrayContext propertyObjectArray() {
		PropertyObjectArrayContext _localctx = new PropertyObjectArrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_propertyObjectArray);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			Match(START_BRACKET);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 149;
				Match(EOL);
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 155;
			propertyObject();
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 156;
						Match(EOL);
						}
						}
						State = 161;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 162;
					Match(COMMA);
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 163;
						Match(EOL);
						}
						}
						State = 168;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 169;
					propertyObject();
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 175;
				Match(EOL);
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181;
			Match(END_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PropertyObjectTypeNameContext propertyObjectTypeName() {
			return GetRuleContext<PropertyObjectTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyObjectNameContext propertyObjectName() {
			return GetRuleContext<PropertyObjectNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GodotProjParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GodotProjParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertyObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyObject(this);
		}
	}

	[RuleVersion(0)]
	public PropertyObjectContext propertyObject() {
		PropertyObjectContext _localctx = new PropertyObjectContext(Context, State);
		EnterRule(_localctx, 20, RULE_propertyObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			propertyObjectTypeName();
			State = 184;
			Match(T__5);
			State = 185;
			propertyObjectName();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 186;
				Match(COMMA);
				State = 187;
				property();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyObjectNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(GodotProjParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GodotProjParser.STRING, 0); }
		public PropertyObjectNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyObjectName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyObjectName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyObjectName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyObjectNameContext propertyObjectName() {
		PropertyObjectNameContext _localctx = new PropertyObjectNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_propertyObjectName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !(_la==KEY || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyObjectTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(GodotProjParser.KEY, 0); }
		public PropertyObjectTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyObjectTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyObjectTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyObjectTypeName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyObjectTypeNameContext propertyObjectTypeName() {
		PropertyObjectTypeNameContext _localctx = new PropertyObjectTypeNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_propertyObjectTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GodotProjParser.STRING, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_propertyName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(GodotProjParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(GodotProjParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(GodotProjParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GodotProjParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GodotProjParser.COMMA, i);
		}
		public NumericStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterNumericStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitNumericStructure(this);
		}
	}

	[RuleVersion(0)]
	public NumericStructureContext numericStructure() {
		NumericStructureContext _localctx = new NumericStructureContext(Context, State);
		EnterRule(_localctx, 28, RULE_numericStructure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(KEY);
			State = 202;
			Match(T__5);
			State = 203;
			Match(NUMBER);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 204;
				Match(COMMA);
				State = 205;
				Match(NUMBER);
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 210;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PropertyObjectContext propertyObject() {
			return GetRuleContext<PropertyObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericStructureContext numericStructure() {
			return GetRuleContext<NumericStructureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ComplexValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterComplexValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitComplexValue(this);
		}
	}

	[RuleVersion(0)]
	public ComplexValueContext complexValue() {
		ComplexValueContext _localctx = new ComplexValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_complexValue);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				@object();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				propertyObject();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				numericStructure();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 215;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PairNameContext pairName() {
			return GetRuleContext<PairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 32, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			pairName();
			State = 219;
			Match(T__1);
			State = 220;
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(GodotProjParser.KEY, 0); }
		public PairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitPairName(this);
		}
	}

	[RuleVersion(0)]
	public PairNameContext pairName() {
		PairNameContext _localctx = new PairNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_pairName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KEY() { return GetTokens(GodotProjParser.KEY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY(int i) {
			return GetToken(GodotProjParser.KEY, i);
		}
		public ComplexPairNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPairName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterComplexPairName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitComplexPairName(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairNameContext complexPairName() {
		ComplexPairNameContext _localctx = new ComplexPairNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_complexPairName);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224;
				Match(KEY);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 225;
					Match(T__7);
					State = 226;
					Match(KEY);
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==T__7 );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				Match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexPairNameContext complexPairName() {
			return GetRuleContext<ComplexPairNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComplexValueContext complexValue() {
			return GetRuleContext<ComplexValueContext>(0);
		}
		public ComplexPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterComplexPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitComplexPair(this);
		}
	}

	[RuleVersion(0)]
	public ComplexPairContext complexPair() {
		ComplexPairContext _localctx = new ComplexPairContext(Context, State);
		EnterRule(_localctx, 38, RULE_complexPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			complexPairName();
			State = 235;
			Match(T__1);
			State = 236;
			complexValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GodotProjParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GodotProjParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 40, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 142848L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(GodotProjParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGodotProjListener typedListener = listener as IGodotProjListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,20,243,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,5,0,46,8,0,10,0,12,0,49,9,0,1,0,1,0,1,0,1,0,5,0,55,8,0,10,0,12,0,58,
		9,0,1,0,5,0,61,8,0,10,0,12,0,64,9,0,1,1,1,1,1,1,1,1,4,1,70,8,1,11,1,12,
		1,71,1,1,5,1,75,8,1,10,1,12,1,78,9,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,87,
		8,3,1,4,1,4,1,4,1,4,5,4,93,8,4,10,4,12,4,96,9,4,1,4,1,4,1,4,1,4,5,4,102,
		8,4,10,4,12,4,105,9,4,1,4,3,4,108,8,4,1,5,5,5,111,8,5,10,5,12,5,114,9,
		5,1,5,1,5,5,5,118,8,5,10,5,12,5,121,9,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,7,3,7,132,8,7,1,8,1,8,1,8,1,8,5,8,138,8,8,10,8,12,8,141,9,8,1,8,1,
		8,1,8,1,8,3,8,147,8,8,1,9,1,9,5,9,151,8,9,10,9,12,9,154,9,9,1,9,1,9,5,
		9,158,8,9,10,9,12,9,161,9,9,1,9,1,9,5,9,165,8,9,10,9,12,9,168,9,9,1,9,
		5,9,171,8,9,10,9,12,9,174,9,9,1,9,5,9,177,8,9,10,9,12,9,180,9,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,5,10,189,8,10,10,10,12,10,192,9,10,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,4,14,207,8,14,11,
		14,12,14,208,1,14,1,14,1,15,1,15,1,15,1,15,3,15,217,8,15,1,16,1,16,1,16,
		1,16,1,17,1,17,1,18,1,18,1,18,4,18,228,8,18,11,18,12,18,229,1,18,3,18,
		233,8,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,0,0,22,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,3,1,0,18,19,2,0,12,
		12,17,17,3,0,9,11,13,13,17,17,250,0,47,1,0,0,0,2,65,1,0,0,0,4,79,1,0,0,
		0,6,86,1,0,0,0,8,107,1,0,0,0,10,112,1,0,0,0,12,122,1,0,0,0,14,131,1,0,
		0,0,16,146,1,0,0,0,18,148,1,0,0,0,20,183,1,0,0,0,22,195,1,0,0,0,24,197,
		1,0,0,0,26,199,1,0,0,0,28,201,1,0,0,0,30,216,1,0,0,0,32,218,1,0,0,0,34,
		222,1,0,0,0,36,232,1,0,0,0,38,234,1,0,0,0,40,238,1,0,0,0,42,240,1,0,0,
		0,44,46,7,0,0,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,0,47,48,1,0,0,
		0,48,50,1,0,0,0,49,47,1,0,0,0,50,51,5,1,0,0,51,52,5,2,0,0,52,56,5,13,0,
		0,53,55,7,0,0,0,54,53,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,
		0,57,62,1,0,0,0,58,56,1,0,0,0,59,61,3,2,1,0,60,59,1,0,0,0,61,64,1,0,0,
		0,62,60,1,0,0,0,62,63,1,0,0,0,63,1,1,0,0,0,64,62,1,0,0,0,65,66,5,15,0,
		0,66,67,3,4,2,0,67,69,5,16,0,0,68,70,5,19,0,0,69,68,1,0,0,0,70,71,1,0,
		0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,76,1,0,0,0,73,75,3,6,3,0,74,73,1,0,
		0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,3,1,0,0,0,78,76,1,0,0,
		0,79,80,5,12,0,0,80,5,1,0,0,0,81,87,5,19,0,0,82,87,5,18,0,0,83,84,3,38,
		19,0,84,85,7,0,0,0,85,87,1,0,0,0,86,81,1,0,0,0,86,82,1,0,0,0,86,83,1,0,
		0,0,87,7,1,0,0,0,88,89,5,3,0,0,89,94,3,10,5,0,90,91,5,14,0,0,91,93,3,10,
		5,0,92,90,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,
		0,0,96,94,1,0,0,0,97,98,5,4,0,0,98,108,1,0,0,0,99,103,5,3,0,0,100,102,
		7,0,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,
		0,104,106,1,0,0,0,105,103,1,0,0,0,106,108,5,4,0,0,107,88,1,0,0,0,107,99,
		1,0,0,0,108,9,1,0,0,0,109,111,7,0,0,0,110,109,1,0,0,0,111,114,1,0,0,0,
		112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,119,
		3,12,6,0,116,118,7,0,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,
		0,119,120,1,0,0,0,120,11,1,0,0,0,121,119,1,0,0,0,122,123,3,26,13,0,123,
		124,5,5,0,0,124,125,3,14,7,0,125,13,1,0,0,0,126,132,3,8,4,0,127,132,3,
		16,8,0,128,132,3,18,9,0,129,132,3,28,14,0,130,132,3,40,20,0,131,126,1,
		0,0,0,131,127,1,0,0,0,131,128,1,0,0,0,131,129,1,0,0,0,131,130,1,0,0,0,
		132,15,1,0,0,0,133,134,5,15,0,0,134,139,3,14,7,0,135,136,5,14,0,0,136,
		138,3,14,7,0,137,135,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,
		0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,16,0,0,143,147,1,0,0,0,
		144,145,5,15,0,0,145,147,5,16,0,0,146,133,1,0,0,0,146,144,1,0,0,0,147,
		17,1,0,0,0,148,152,5,15,0,0,149,151,5,19,0,0,150,149,1,0,0,0,151,154,1,
		0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,
		155,172,3,20,10,0,156,158,5,19,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,
		157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,166,5,
		14,0,0,163,165,5,19,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,
		0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,171,3,20,10,0,170,
		159,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,178,1,
		0,0,0,174,172,1,0,0,0,175,177,5,19,0,0,176,175,1,0,0,0,177,180,1,0,0,0,
		178,176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,
		5,16,0,0,182,19,1,0,0,0,183,184,3,24,12,0,184,185,5,6,0,0,185,190,3,22,
		11,0,186,187,5,14,0,0,187,189,3,12,6,0,188,186,1,0,0,0,189,192,1,0,0,0,
		190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,
		5,7,0,0,194,21,1,0,0,0,195,196,7,1,0,0,196,23,1,0,0,0,197,198,5,12,0,0,
		198,25,1,0,0,0,199,200,5,17,0,0,200,27,1,0,0,0,201,202,5,12,0,0,202,203,
		5,6,0,0,203,206,5,13,0,0,204,205,5,14,0,0,205,207,5,13,0,0,206,204,1,0,
		0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,
		211,5,7,0,0,211,29,1,0,0,0,212,217,3,8,4,0,213,217,3,20,10,0,214,217,3,
		28,14,0,215,217,3,40,20,0,216,212,1,0,0,0,216,213,1,0,0,0,216,214,1,0,
		0,0,216,215,1,0,0,0,217,31,1,0,0,0,218,219,3,34,17,0,219,220,5,2,0,0,220,
		221,3,40,20,0,221,33,1,0,0,0,222,223,5,12,0,0,223,35,1,0,0,0,224,227,5,
		12,0,0,225,226,5,8,0,0,226,228,5,12,0,0,227,225,1,0,0,0,228,229,1,0,0,
		0,229,227,1,0,0,0,229,230,1,0,0,0,230,233,1,0,0,0,231,233,5,12,0,0,232,
		224,1,0,0,0,232,231,1,0,0,0,233,37,1,0,0,0,234,235,3,36,18,0,235,236,5,
		2,0,0,236,237,3,30,15,0,237,39,1,0,0,0,238,239,7,2,0,0,239,41,1,0,0,0,
		240,241,5,13,0,0,241,43,1,0,0,0,24,47,56,62,71,76,86,94,103,107,112,119,
		131,139,146,152,159,166,172,178,190,208,216,229,232
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Righthand.GodotTscnParser.Engine.Grammar
